{"version":3,"sources":["../../src/core/common/Input.js"],"names":["Input","props","value","format","state","stringValue","invalid","handleKeyDown","bind","handleChange","withClear","withClearButton","Boolean","position","renderInput","renderClearButton","placeholder","style","onBlur","invalidStyle","rest","className","ref","input","onKeyDown","onChange","onFocus","handleFocus","target","setState","parsed","isValid","isSame","e","isHovered","clearText","clearBtn","clearBtnStyle","hoveredStyle","styleIcon","fontFamily","fontStyle","verticalAlign","WebkitFontSmoothing","MozFontSmoothing","MsFontSmoothing","OFontSmoothing","fontSmoothing","title","onClick","evt","preventDefault","onClear","keyCode","onCollapsePanel","blur","nextProps","propTypes","string","object","func","bool","defaultProps","color"],"mappings":"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","file":"Input.js","sourcesContent":["import React, { PropTypes, PureComponent } from 'react'\nimport moment from 'moment'\nimport hover from '../_hoc/hover'\nimport { omit } from './utils'\n\nclass Input extends PureComponent {\n\n    constructor(props) {\n        super(props)\n        const { value, format } = props\n        this.state =  {\n            stringValue: (value && value.format(format)) || '',\n            invalid: false,\n        }\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    render() {\n        const { withClear } = this.props\n        const withClearButton = withClear && Boolean(this.props.value)\n        return (\n            <div className={'date-picker-input-wrap'} style={{position:'relative'}}>\n                {this.renderInput()}\n                {withClearButton ? this.renderClearButton() : null}\n            </div>\n        )\n    }\n\n    renderInput() {\n        const {\n            placeholder,\n            style,            \n            onBlur,\n        } = this.props\n        const { invalid, stringValue } = this.state\n\n        const { invalid: invalidStyle, ...rest } = omit(style, 'clearBtn')\n\n        return (\n            <input {...{\n                className: 'date-picker-input',\n                style: {\n                    ...rest,\n                    ...(invalid ? invalidStyle : {})\n                },\n                ref: (ref) => this.input = ref,\n                value: stringValue,\n                placeholder,\n                onKeyDown: this.handleKeyDown,\n                onChange: this.handleChange,\n                onBlur,\n                onFocus: this.handleFocus.bind(this),\n            }}/>\n        )\n    }\n\n    handleChange({target}) {\n        const {value: stringValue} = target\n        this.setState({stringValue})\n\n        const { format, onChange, value} = this.props\n\n        if(value && !stringValue) {\n            onChange(null)\n            return\n        }\n\n        const parsed = moment(stringValue, format, true)\n        if (!parsed.isValid()) {\n            this.setState({invalid: true})\n            return\n        }\n\n        if ((value && !value.isSame(parsed)) || !value) {\n            onChange(parsed)\n        }\n        this.setState({invalid: false})\n    }\n\n    handleFocus(e) {\n        const { onFocus } = this.props\n        onFocus(e)\n    }\n\n    renderClearButton() {\n        const { style, isHovered, clearText, onChange } = this.props\n        const { clearBtn: clearBtnStyle={} } = style\n        const { ':hover': hoveredStyle } = clearBtnStyle\n\n        const styleIcon = {\n            fontFamily: 'SignavioFont',\n            fontStyle: 'normal',\n            verticalAlign: 'top',\n            WebkitFontSmoothing: 'antialiased',\n            MozFontSmoothing: 'antialiased',\n            MsFontSmoothing: 'antialiased',\n            OFontSmoothing: 'antialiased',\n            fontSmoothing: 'antialiased',\n        }\n\n        const props = {\n            className: 'date-picker-input-clear-btn',\n            style: {\n                ...clearBtnStyle,\n                ...(isHovered ? hoveredStyle : {})\n            },\n            title: clearText,\n            onClick: () => onChange(null)\n        }\n        return (\n            <div {...props}>\n                <i style={styleIcon}>&#10005;</i>\n            </div>\n        )\n    }\n\n    handleClear(evt) {\n        evt.preventDefault()\n        this.setState({ stringValue: '' })\n        this.props.onClear(evt)\n    }\n\n    handleKeyDown(evt) {\n        if(evt.keyCode !== 13 && evt.keyCode !== 27) {\n            return\n        }\n        const { onCollapsePanel, onKeyDown } = this.props\n        this.input.blur()\n        onCollapsePanel()\n        onKeyDown && onKeyDown(evt)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const { value, format } = nextProps\n\n        this.setState({\n            stringValue: (value && value.format(format)) || '',\n            invalid: false,\n        })\n    }\n}\n\nInput.propTypes = {\n    format: PropTypes.string,\n    placeholder: PropTypes.string,\n    clearText: PropTypes.string,\n    value: PropTypes.object,\n    onChange: PropTypes.func,\n    onClear: PropTypes.func,\n    withClear: PropTypes.bool,\n    onCollapsePanel: PropTypes.func,\n}\n\nInput.defaultProps = {\n    style: {\n        invalid: {\n            color: 'tomato'\n        }\n    },\n    withClear: false,\n    format: 'YYYY/MM/DD'\n}\n\nexport default hover(Input)\n"]}