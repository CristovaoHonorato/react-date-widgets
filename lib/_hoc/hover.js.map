{"version":3,"sources":["../../src/core/_hoc/hover.js"],"names":["createHover","WrappedComponent","Hover","arguments","state","isHovered","boundEnter","handleMouseEnter","bind","boundLeave","handleMouseLeave","props","setState","component","findDOMNode","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;kBAGwBA,W;;AAHxB;;;;AACA;;;;;;;;;;;;AAEe,SAASA,WAAT,CAAqBC,gBAArB,EAAsC;AAAA,QAE3CC,KAF2C;AAAA;;AAI7C,yBAAc;AAAA;;AAAA,uHACDC,SADC;;AAEV,kBAAKC,KAAL,GAAa,EAAEC,WAAW,KAAb,EAAb;AACA,kBAAKC,UAAL,GAAkB,MAAKC,gBAAL,CAAsBC,IAAtB,OAAlB;AACA,kBAAKC,UAAL,GAAkB,MAAKC,gBAAL,CAAsBF,IAAtB,OAAlB;AAJU;AAKb;;AAT4C;AAAA;AAAA,qCAWrC;AAAA,oBACCH,SADD,GACc,KAAKD,KADnB,CACCC,SADD;;AAEJ,uBAAO,8BAAC,gBAAD,eAAsB,KAAKM,KAA3B,IAAkC,WAAWN,SAA7C,IAAP;AACH;AAd4C;AAAA;AAAA,+CAgB3B;AACd,qBAAKO,QAAL,CAAc,EAACP,WAAU,IAAX,EAAd;AACH;AAlB4C;AAAA;AAAA,+CAoB3B;AACd,qBAAKO,QAAL,CAAc,EAACP,WAAU,KAAX,EAAd;AACH;AAtB4C;AAAA;AAAA,gDAwB1B;AACf,oBAAIQ,YAAY,mBAASC,WAAT,CAAqB,IAArB,CAAhB;AACA,oBAAG,CAACD,SAAJ,EAAc;;AAEdA,0BAAUE,gBAAV,CAA2B,YAA3B,EAAyC,KAAKT,UAA9C;AACAO,0BAAUE,gBAAV,CAA2B,YAA3B,EAAyC,KAAKN,UAA9C;AACH;AA9B4C;AAAA;AAAA,mDAgCvB;AAClB,oBAAII,YAAY,mBAASC,WAAT,CAAqB,IAArB,CAAhB;AACA,oBAAG,CAACD,SAAJ,EAAc;;AAEdA,0BAAUG,mBAAV,CAA8B,YAA9B,EAA4C,KAAKV,UAAjD;AACAO,0BAAUG,mBAAV,CAA8B,YAA9B,EAA4C,KAAKP,UAAjD;AACH;AAtC4C;;AAAA;AAAA;;AAyCjD,WAAOP,KAAP;AACH","file":"hover.js","sourcesContent":["import React, {Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default function createHover(WrappedComponent){\n\n    class Hover extends Component {\n\n        constructor() {\n            super(...arguments);\n            this.state = { isHovered: false };\n            this.boundEnter = this.handleMouseEnter.bind(this);\n            this.boundLeave = this.handleMouseLeave.bind(this);\n        }\n\n        render(){\n            var {isHovered} = this.state;\n            return <WrappedComponent {...this.props} isHovered={isHovered}/>;\n        }\n\n        handleMouseEnter(){\n            this.setState({isHovered:true});\n        }\n\n        handleMouseLeave(){\n            this.setState({isHovered:false});\n        }\n\n        componentDidMount(){\n            var component = ReactDOM.findDOMNode(this);\n            if(!component)return;\n\n            component.addEventListener('mouseenter', this.boundEnter);\n            component.addEventListener('mouseleave', this.boundLeave);\n        }\n\n        componentWillUnmount(){\n            var component = ReactDOM.findDOMNode(this);\n            if(!component)return;\n\n            component.removeEventListener('mouseenter', this.boundEnter);\n            component.removeEventListener('mouseleave', this.boundLeave);\n        }\n    }\n\n    return Hover;\n}\n"]}