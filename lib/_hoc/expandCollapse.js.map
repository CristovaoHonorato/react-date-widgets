{"version":3,"sources":["../../src/core/_hoc/expandCollapse.js"],"names":["createExpandCollapse","combine","handlers","args","forEach","handler","layoutStyle","stickNodeStyle","zIndex","boxSizing","position","Input","Panel","collapseOnChange","ExpandCollapse","arguments","state","isExpanded","collapse","bind","expand","handleFocusIn","props","className","style","onFocus","rest","stickProps","styleNode","node","renderPanel","ref","element","input","tagName","getElementsByTagName","onCollapsePanel","onChange","panel","setTimeout","target","contains","setState","document","body","addEventListener","removeEventListener","e","activeElement","noFocus"],"mappings":"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","file":"expandCollapse.js","sourcesContent":["import React, { Component } from 'react'\nimport { findDOMNode } from 'react-dom'\nimport enhanceWithClickOutside from 'react-click-outside'\n\nimport Stick from '../common/Stick'\nimport { extendStyle } from '../common/utils'\n\nconst combine = (...handlers) => (...args) => {\n    handlers.forEach(\n        handler => handler && handler(...args)\n    )\n}\n\nconst layoutStyle = {\n    stickNodeStyle: {\n        zIndex: 10000,\n        boxSizing: 'border-box',\n        position: 'absolute'\n    }\n}\n\nexport default function createExpandCollapse(\n    Input,\n    Panel,\n    collapseOnChange = false\n) {\n\n    class ExpandCollapse extends Component {\n\n        constructor() {\n            super(...arguments)\n            this.state = {\n                isExpanded: false\n            }\n            this.collapse = this.collapse.bind(this)\n            this.expand = this.expand.bind(this)\n            this.handleFocusIn = this.handleFocusIn.bind(this)\n        }\n\n        render() {\n            const {className, style, onFocus, ...rest} = this.props\n\n            const stickProps = {\n                className,\n                styleNode: extendStyle(style.stickNodeStyle, layoutStyle.stickNodeStyle),\n                node : this.state.isExpanded ? this.renderPanel() : null,\n            }\n\n            return (\n                <Stick {...stickProps}>\n                    <Input {...{\n                        ref: ref => {\n                            const element = findDOMNode(ref)\n                            if(element === null) return\n                            this.input = element.tagName === 'INPUT'\n                                ? element\n                                : element.getElementsByTagName('input')[0]\n\n                        },\n                        ...rest,\n                        style: style.input,\n                        onFocus: combine(\n                            this.expand,\n                            onFocus\n                        ),\n                        onCollapsePanel: this.collapse\n                    }}/>\n                </Stick>\n            )\n        }\n\n        renderPanel() {\n            const { onChange, style, ...rest } = this.props\n\n            return (\n                <Panel {...{\n                    ref: ref => this.panel = findDOMNode(ref),\n                    ...rest,\n                    style: style.panel,\n                    onChange: combine(\n                        onChange,\n                        collapseOnChange ? (() => setTimeout(() => this.collapse(), 0)) : () => {},\n                    ),\n                    onCollapsePanel: this.collapse\n                }}/>\n            )\n        }\n\n\n        handleClickOutside({ target }) {\n            if(this.panel && !this.panel.contains(target)) {\n                this.collapse()\n            }\n        }\n\n        expand() {\n            if(!this.state.isExpanded) {\n                this.setState({ isExpanded: true })\n                document.body.addEventListener('focusin', this.handleFocusIn)\n            }\n        }\n\n        collapse() {\n            if(this.state.isExpanded) {\n                document.body.removeEventListener('focusin', this.handleFocusIn)\n                this.setState({ isExpanded: false })\n\n            }\n        }\n\n        handleFocusIn(e) {\n            const { activeElement } = document\n            const noFocus = (\n                activeElement.tagName === 'INPUT' &&\n                activeElement !== this.input\n            )\n\n            if(noFocus) {\n                this.collapse()\n            }\n        }\n\n        componentWillUnmount() {\n            document.body.removeEventListener('focusin', this.handleFocusIn)\n        }\n    }\n    return enhanceWithClickOutside(ExpandCollapse)\n}\n"]}